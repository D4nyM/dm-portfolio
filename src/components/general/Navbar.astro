---
import { info } from "@data";
import { createLogo } from "@utils";
---

<header class="container flex flex-col-reverse items-center relative justify-center h-[80px] md:flex-row md:h-[123px] bg-white dark:bg-dark top-0">
  <div class="flex items-center justify-between w-4/5">
    <a class="text-2xl font-semibold dark:text-light dark:font-semibold font-outfit dark:hover:text-[var(--tomato)] hover:text-[var(--midnight-green)]" href="/">
      {createLogo(info.name)}.
    </a>
    <!-- Mobile Hamburger Menu Icon -->
    <div class="flex items-center md:hidden">
      <button aria-label="menu-button" class="outline-none mobile-menu-button">
        <svg class="w-6 h-6 dark:text-light" x-show="!showMenu" fill="none" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" stroke="currentColor" >
          <path d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
  </div>
  <nav id="main-nav" class="flex items-center hide md:visible md:open bg-light dark:bg-dark nav-mobile">
    <ul class="flex flex-col items-center md:flex-row">
      <li>
        <a class="block p-4 text-lg dark:text-light dark:hover:text-[var(--tomato)] hover:text-[var(--midnight-green)] transition duration-550 hover:bg-[#41404028] rounded-lg" href="/">Home</a>
      </li>
      <li>
        <a class="block p-4 text-lg dark:text-light dark:hover:text-[var(--tomato)] hover:text-[var(--midnight-green)] transition duration-550 hover:bg-[#41404028] rounded-lg" href="/projects">Projects</a>
      </li>
      <li>
        <a class="whitespace-nowrap block p-4 text-lg dark:text-light dark:hover:text-[var(--tomato)] hover:text-[var(--midnight-green)] transition duration-550 hover:bg-[#41404028] rounded-lg" href="/about">About Me</a>
      </li>
      <li>
        <a class="block p-4 text-lg dark:text-light dark:hover:text-[var(--tomato)] hover:text-[var(--midnight-green)] transition duration-550 hover:bg-[#41404028] rounded-lg" href="/contact">Contact</a>
      </li>
      <li>
        <button aria-label="theme-button" id="theme-button" class="dark:text-light rounded-lg p-4 ml-2 bg-slate-100 dark:bg-[#202020] theme-button"></button>
      </li>
    </ul>
  </nav>
</header>

<script>
  //toggle menu
  const menuButton = document.querySelector('.mobile-menu-button');
  const nav = document.querySelector('#main-nav') as HTMLElement;

  function toggleNav() {
    if (nav.classList.contains('open')) {
      nav.classList.remove('open');
      nav.classList.add('close');
      // Delay for animation to complete
      setTimeout(() => {
        nav.style.display = 'none';
      }, 550);
    } else {
      nav.classList.add('open');
      nav.classList.remove('close');
      setTimeout(() => {
        nav.style.display = 'block';
      }, 550);
    }
  }

  menuButton.addEventListener('click', function() {
    // Toggle the display of the main nav element
    toggleNav();
  });
  
  // const themeButton = document.querySelector('.theme-button');
  // If user clicks anywhere outside the menu when it is open, close it. 
  document.addEventListener('click', function(event) {
    if (!nav.parentNode.contains(event.target as Node) && nav.style.display === 'block') {
      toggleNav();
    }
  });

  
</script>

<script is:inline>
  const moon = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-moon"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>`;
  const sun = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-sun"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>`;
  const themeButton = document.getElementById("theme-button");
  const browserTheme = document.querySelector('[name="theme-color"]');
  let isDark;
  const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  if (theme === "light") {
    document.documentElement.setAttribute("data-theme", "light");
    isDark = true;
    themeButton.innerHTML = moon;
    browserTheme.content = "#FFFFFF";
  } else {
    document.documentElement.setAttribute("data-theme", "dark");
    isDark = false;
    themeButton.innerHTML = sun;
    browserTheme.content = "#111111";
  }
  window.localStorage.setItem("theme", theme);

  const darkModeHandler = () => {
    if (isDark) {
      document.documentElement.setAttribute("data-theme", "dark");
      localStorage.theme = "dark";
      isDark = false;
      themeButton.innerHTML = sun;
      browserTheme.content = "#111111";
    } else {
      document.documentElement.setAttribute("data-theme", "light");
      localStorage.theme = "light";
      isDark = true;
      themeButton.innerHTML = moon;
      browserTheme.content = "#FFFFFF";
    }
  };

  themeButton.addEventListener("click", darkModeHandler);
</script>

<style>
@media (max-width: 768px) {
  body {
    overflow-x: hidden;
  }
  .dark:hover:text-[var(--tomato)],
  .dark:hover:text-[var(--tomato)]:hover,
  .hover\:bg-[#41404028]:hover {
    color: var(--tomato);
    background-color: #41404028;
  }

  /* Style the nav menu items */
  .nav-mobile {
    position: absolute;
    top: 4rem;
    right: 0;
    width: 8rem;
    height: 100vh;
    animation-duration: 550ms;
    animation-timing-function: ease-out;
  }

  @keyframes slide-in {
    from {
      transform: translateX(100%);
    }
    to {
      transform: translateX(0);
    }
  }

  @keyframes slide-out {
    from {
      transform: translateX(0);
    }
    to {
      transform: translateX(100%);
    }
  }

  #main-nav {
    display: none;
  }

  .nav-mobile.open {
    animation-name: slide-in;
  }

  .nav-mobile.close {
    animation-name: slide-out;
  }



  }
</style>